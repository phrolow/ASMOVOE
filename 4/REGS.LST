Turbo Assembler	 Version 4.1	    03/04/23 15:34:04	    Page 1
regs.asm



      1				     .286
      2	0000			     .model tiny
      3	0000			     .code
      4
      5				     locals @@
      6
      7				     org 100h
      8
      9	0100  E9 007F		     Start:  jmp EOP
     10
     11				     include regs.asi
1    12	0103			     New09   proc
1    13	0103  50 53 51 52 06 55		     push ax bx	cx dx es bp				   ;copy data
1    14	0109  8B EC			     mov bp, sp
1    15
1    16	010B  E4 60			     in	al, 60h					     ; 60h -> al
1    17	010D  3C 02			     cmp al, 2
1    18	010F  75 1D			     jne skip
1    19
1    20	0111  BA 0230			     mov dx, (80 * 3 + 40) * 2
1    21
1    22	0114  B9 0006			     mov cx, 6
1    23	0117  83 C5 0E			     add bp, 14
1    24
1    25	011A  81 C2 0140	     @@Next: add dx, 160 * 2
1    26	011E  8B 46 00			     mov ax, [bp]
1    27	0121  8B DA			     mov bx, dx
1    28
1    29	0123  E8 001E			     call hexout
1    30
1    31	0126  83 ED 02			     sub bp, 2
1    32
1    33	0129  E2 EF			     loop @@Next
1    34	012B  E8 0016			     call hexout
1    35
1    36	012E  E4 61		     skip:   in	al, 61h					     ; blinking
1    37	0130  0C 80			     or	al, 80h
1    38	0132  E6 61			     out 61h, al
1    39	0134  24 7F			     and al, not 80h
1    40	0136  E6 61			     out 61h, al
1    41
1    42	0138  5D 07 5A 59 5B 58		     pop bp es dx cx bx	ax
1    43
1    44	013E  EA				     db	0eah
1    45	013F  0000		     Old09Ofs	     dw	0h
1    46	0141  0000		     Old09Seg	     dw	0h
1    47
1    48	0143  CF			     iret
1    49	0144				     endp
1    50
1    51				     include hexout.asi
2    52				     ;===============================================;
2    53				     ; Uses: ax, bx				     ;
2    54				     ; Destroys: cx, es, di			     ;
2    55				     ; Returns:					     ;
2    56				     ; Expects:	num in ax, start of label in bx	     ;
2    57				     ;===============================================;
Turbo Assembler	 Version 4.1	    03/04/23 15:34:04	    Page 2
regs.asm



2    58
2    59	0144			     Hexout  proc
2    60	0144  51			     push cx
2    61
2    62	0145  BF B800			     mov di, 0B800h
2    63	0148  8E C7			     mov es, di
2    64	014A  8B FB			     mov di, bx		     ; set vm to line begin (dx)
2    65
2    66	014C  B9 0004			     mov cx, word ptr 4	     ; we output 4 chars
2    67
2    68	014F  BB 000F		     @@Next: mov bx, 0Fh	     ; bit mask
2    69
2    70	0152  FE C9			     dec cl
2    71
2    72	0154  D3 E3			     shl bx, cl
2    73	0156  D3 E3			     shl bx, cl
2    74	0158  D3 E3			     shl bx, cl
2    75	015A  D3 E3			     shl bx, cl
2    76
2    77	015C  23 D8			     and bx, ax
2    78
2    79	015E  D3 EB			     shr bx, cl
2    80	0160  D3 EB			     shr bx, cl
2    81	0162  D3 EB			     shr bx, cl
2    82	0164  D3 EB			     shr bx, cl
2    83
2    84	0166  FE C1			     inc cl		     ; getting the letter
2    85
2    86	0168  83 FB 0A			     cmp bx, 0Ah	     ; is char decimal
2    87	016B  72 06			     jb	@@Dec
2    88
2    89	016D  83 C3 37			     add bx, 'A' - 10d	     ; if char not decimal
2    90
2    91	0170  EB 04 90			     jmp @@Out
2    92
2    93	0173  83 C3 30		     @@Dec:  add bx, '0'	     ; if char is decimal
2    94
2    95	0176  B7 4B		     @@Out:  mov bh, 4Bh
2    96
2    97	0178  26: 89 1D			     mov es:[di], bx	     ; output
2    98
2    99	017B  83 C7 02			     add di, 2
2   100
2   101	017E  E2 CF			     loop @@Next
2   102
2   103	0180  59			     pop cx
2   104	0181  C3			     ret
2   105	0182				     endp
    106
    107	0182  FA		     EOP:    cli
    108
    109	0183  33 DB			     xor bx, bx
    110	0185  8E C3			     mov es, bx
    111	0187  BB 0024			     mov bx, 4 * 9				     ; 8 interruption -	keyboard
    112
    113	018A  26: 8B 07			     mov ax, es:[bx]
    114	018D  A3 013Fr			     mov Old09Ofs, ax				     ; old interrupt
Turbo Assembler	 Version 4.1	    03/04/23 15:34:04	    Page 3
regs.asm



    115	0190  26: C7 07	0103r		     mov es:[bx], offset New09			     ; change on new version
    116
    117	0195  83 C3 02			     add bx, 2
    118	0198  26: 8B 07			     mov ax, es:[bx]
    119	019B  A3 0141r			     mov Old09Seg, ax				     ; pointer on segment
    120	019E  8C C8			     mov ax, cs
    121	01A0  26: 89 07			     mov es:[bx], ax				     ; NewSegment
    122
    123	01A3  FB			     sti
    124
    125	01A4  B8 3100			     mov ax, 3100h
    126	01A7  BA 0182r			     mov dx, offset EOP
    127	01AA  C1 EA 04			     shr dx, 4
    128	01AD  42			     inc dx
    129	01AE  CD 21			     int 21h
    130
    131				     end     Start
Turbo Assembler	 Version 4.1	    03/04/23 15:34:04	    Page 4
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/04/23"
??FILENAME			  Text	 "regs	  "
??TIME				  Text	 "15:34:04"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@DEC				  Near	 DGROUP:0173
@@NEXT				  Near	 DGROUP:011A
@@NEXT				  Near	 DGROUP:014F
@@OUT				  Near	 DGROUP:0176
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0707H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 REGS
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
EOP				  Near	 DGROUP:0182
HEXOUT				  Near	 DGROUP:0144
NEW09				  Near	 DGROUP:0103
OLD09OFS			  Word	 DGROUP:013F
OLD09SEG			  Word	 DGROUP:0141
SKIP				  Near	 DGROUP:012E
START				  Near	 DGROUP:0100

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  01B0 Word	  Public  CODE
