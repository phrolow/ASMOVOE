Turbo Assembler	 Version 4.1	    03/04/23 08:33:36	    Page 1
strcpy.asm



      1	0000			     .model tiny
      2	0000			     .code
      3
      4				     org 100h
      5
      6				     locals @@
      7
      8	0100  B4 0A		     Start:  mov ah, 0Ah
      9	0102  BA 0243r			     mov dx, offset outl
     10	0105  CD 21			     int 21h
     11
     12	0107  BA 0237r			     mov dx, offset src
     13	010A  CD 21			     int 21h
     14
     15	010C  B8 0237r			     mov ax, offset src
     16	010F  05 0002			     add ax, 2
     17	0112  50			     push ax
     18
     19	0113  B8 0243r			     mov ax, offset outl
     20	0116  05 0002			     add ax, 2
     21	0119  50			     push ax
     22
     23	011A  E8 000B			     call strcpy
     24
     25	011D  4F			     dec di
     26	011E  8B F7			     mov si, di
     27
     28	0120  E8 001B			     call fout
     29
     30	0123  B8 4C00			     mov ax, 04C00h
     31	0126  CD 21			     int 21h
     32
     33				     include strcpy.asi
1    34				     ; char *strcpy(char *str1,	const char *str2)
1    35
1    36	0128			     strcpy  proc
1    37	0128  55			     push bp
1    38	0129  8B EC			     mov bp, sp
1    39
1    40	012B  8B 7E 04			     mov di, [bp + 4]
1    41
1    42	012E  8B 76 06			     mov si, [bp + 6]
1    43
1    44	0131  AC		     @@Next: lodsb
1    45	0132  AA			     stosb
1    46
1    47	0133  3C 0D			     cmp al, 0Dh
1    48	0135  75 FA			     jne @@Next
1    49
1    50	0137  8B 7E 04			     mov di, [bp + 4]
1    51
1    52	013A  8B E5			     mov sp, bp
1    53	013C  5D			     pop bp
1    54	013D  C3			     ret
1    55	013E				     endp
     56
     57				     include out.asi
Turbo Assembler	 Version 4.1	    03/04/23 08:33:36	    Page 2
strcpy.asm



1    58				     ; pls si
1    59
1    60	013E			     fout    proc
1    61	013E  55			     push bp
1    62	013F  8B EC			     mov bp, sp
1    63
1    64	0141  56			     push si
1    65
1    66	0142  B4 1E			     mov ah, 1Eh
1    67
1    68	0144  BF B800			     mov di, 0B800h
1    69	0147  8E C7			     mov es, di
1    70
1    71	0149  BF 0334			     mov di, (80 * 5 + 10) * 2
1    72
1    73	014C  B6 0F			     mov dh, 15
1    74	014E  B2 3C			     mov dl, 60
1    75
1    76	0150  BE 022Er			     mov si, offset frame
1    77
1    78	0153  E8 0019			     call Border
1    79
1    80	0156  5E			     pop si
1    81
1    82	0157  8A 1C			     mov bl, byte ptr [si]
1    83	0159  32 FF			     xor bh, bh
1    84
1    85	015B  46			     inc si
1    86
1    87	015C  32 E4			     xor ah, ah
1    88	015E  8A C3			     mov al, bl
1    89
1    90	0160  B2 0A			     mov dl, 10
1    91	0162  F6 F2			     div dl
1    92
1    93	0164  8A D4			     mov dl, ah
1    94	0166  8A F0			     mov dh, al
1    95
1    96	0168  E8 0068			     call Text
1    97
1    98	016B  8B E5			     mov sp, bp
1    99	016D  5D			     pop bp
1   100	016E  C3			     ret
1   101	016F				     endp
1   102
1   103				     include bordre.asi
2   104				     ;
2   105				     ; args - ah, di, dl, si
2   106				     ; ah - attribute
2   107				     ; di - start
2   108				     ; dl - width
2   109				     ; si - border source
2   110				     ; dh - height
2   111				     ; destroys	- dohuya
2   112				     ;
2   113
2   114	016F			     Border  proc
Turbo Assembler	 Version 4.1	    03/04/23 08:33:36	    Page 3
strcpy.asm



2   115	016F  55			     push bp
2   116	0170  8B EC			     mov bp, sp
2   117
2   118	0172  55			     push bp
2   119
2   120	0173  E8 0048			     call String
2   121
2   122	0176  81 C7 00A0		     add di, 80	* 2
2   123
2   124	017A  32 FF			     xor bh, bh
2   125	017C  8A DA			     mov bl, dl
2   126
2   127	017E  2B FB			     sub di, bx
2   128	0180  2B FB			     sub di, bx
2   129
2   130	0182  8B EA			     mov bp, dx
2   131	0184  81 E5 FF00		     and bp, 0FF00h
2   132	0188  D1 ED D1 ED D1 ED	D1+	     shr bp, 8
    133	      ED D1 ED D1 ED D1	ED+
    134	      D1 ED
2   135	0198  83 ED 02			     sub bp, 2
2   136
2   137	019B  E8 0020		     zaloop: call String
2   138
2   139	019E  83 EE 03			     sub si, 3
2   140
2   141	01A1  81 C7 00A0		     add di, 80	* 2
2   142
2   143	01A5  32 FF			     xor bh, bh
2   144	01A7  8A DA			     mov bl, dl
2   145
2   146	01A9  2B FB			     sub di, bx
2   147	01AB  2B FB			     sub di, bx
2   148
2   149	01AD  4D			     dec bp
2   150
2   151	01AE  83 FD 00			     cmp bp, 0
2   152	01B1  75 E8			     jne zaloop
2   153
2   154	01B3  83 C6 03			     add si, 3
2   155
2   156	01B6  E8 0005			     call String
2   157
2   158	01B9  5D			     pop bp
2   159
2   160	01BA  8B E5			     mov sp, bp
2   161	01BC  5D			     pop bp
2   162	01BD  C3			     ret
2   163	01BE				     endp
2   164
2   165					     include string.asi
3   166				     ;
3   167				     ; args - ah, di, dl
3   168				     ; ah - attribute
3   169				     ; di - start
3   170				     ; dl - length
3   171				     ; destroys	- si, cx
Turbo Assembler	 Version 4.1	    03/04/23 08:33:36	    Page 4
strcpy.asm



3   172				     ;
3   173
3   174	01BE			     String  proc
3   175
3   176	01BE  AC			     lodsb
3   177	01BF  AB			     stosw
3   178
3   179	01C0  AC			     lodsb
3   180
3   181	01C1  8A CA			     mov cl, dl
3   182	01C3  80 E9 02			     sub cl, 2
3   183	01C6  32 ED			     xor ch, ch
3   184
3   185	01C8  26: 89 05		     @@Next: mov es:[di], ax
3   186
3   187	01CB  83 C7 02			     add di, 2
3   188
3   189	01CE  E2 F8			     loop @@Next
3   190
3   191	01D0  AC			     lodsb
3   192	01D1  AB			     stosw
3   193
3   194	01D2  C3			     ret
3   195	01D3				     endp
1   196				     include text.asi
2   197	01D3			     Text    proc
2   198
2   199	01D3  BF 07D0			     mov di, 80	* 25
2   200
2   201	01D6  8B C2			     mov ax, dx
2   202	01D8  32 E4			     xor ah, ah			     ; dl в общ
2   203
2   204	01DA  80 FE 00			     cmp dh, 0
2   205	01DD  75 03			     jne not_smol_txt1		     ; концептуально - сначала идет +
    206				     распечатка "больших" строк, а потом маленькой; ну и    +
    207				     здесь	джамп сразу к распечатке маленькой; важно не   +
    208				     проебать dl
2   209
2   210	01DF  EB 34 90			     jmp smol_txt
2   211
2   212	01E2			     not_smol_txt1:
2   213
2   214	01E2  32 E4			     xor ah, ah
2   215	01E4  8A C6			     mov al, dh
2   216
2   217	01E6  8B E9			     mov bp, cx
2   218
2   219	01E8  B9 00A0			     mov cx, word ptr 80 * 2
2   220
2   221	01EB			     Height:
2   222
2   223	01EB  2B F8			     sub di, ax
2   224
2   225	01ED  E2 FC			     loop Height
2   226
2   227	01EF  8B CD			     mov cx, bp
2   228
Turbo Assembler	 Version 4.1	    03/04/23 08:33:36	    Page 5
strcpy.asm



2   229	01F1  8A CE			     mov cl, dh
2   230	01F3  32 ED			     xor ch, ch
2   231
2   232	01F5			     @@Next:
2   233	01F5  80 F9 00			     cmp cl, 0
2   234	01F8  75 03			     jne not_smol_txt
2   235
2   236	01FA  EB 19 90			     jmp smol_txt
2   237
2   238	01FD			     not_smol_txt:
2   239
2   240	01FD  83 EF 0A			     sub di, 5 * 2
2   241
2   242	0200  B4 1E			     mov ah, 1Eh
2   243
2   244	0202  8B E9			     mov bp, cx
2   245
2   246	0204  B9 000A			     mov cx, word ptr 10
2   247
2   248	0207			     WriteLine:
2   249
2   250	0207  AC			     lodsb
2   251	0208  AB			     stosw
2   252
2   253	0209  E2 FC			     loop WriteLine
2   254
2   255	020B  8B CD			     mov cx, bp
2   256
2   257	020D  FE C9			     dec cl
2   258	020F  81 C7 0096		     add di, (80 - 5) *	2
2   259
2   260	0213  EB E0			     jmp @@Next
2   261
2   262	0215			     smol_txt:
2   263	0215  8A C2			     mov al, dl
2   264	0217  32 E4			     xor ah, ah
2   265
2   266	0219  2B F8			     sub di, ax
2   267
2   268	021B  8B CA			     mov cx, dx
2   269	021D  32 ED			     xor ch, ch
2   270
2   271	021F  B4 1E			     mov ah, 1Eh
2   272
2   273	0221  83 E7 FE			     and di, 0FFFEh		     ; need even di
2   274
2   275	0224			     @@Next2:
2   276	0224  83 F9 00			     cmp cx, 0
2   277	0227  74 04			     je	@@ret			     ; cause loop incs cx
2   278
2   279	0229  AC			     lodsb
2   280	022A  AB			     stosw
2   281
2   282
2   283	022B  E2 F7			     loop @@Next2
2   284
2   285	022D  C3		     @@ret:  ret
Turbo Assembler	 Version 4.1	    03/04/23 08:33:36	    Page 6
strcpy.asm



2   286	022E				     endp
1   287
1   288
1   289
    290
    291	022E  44 45 44 45 20 45	44+  frame   db	'D', 'E', 'D', 'E', ' ', 'E', 'D', 'E',	'D'
    292	      45 44
    293	0237  0A 00 0A*(00)	     src     db	10, 0, 10 dup(0)
    294	0243  0A 00 0A*(00)	     outl    db	10, 0, 10 dup(0)
    295
    296				     end     Start
Turbo Assembler	 Version 4.1	    03/04/23 08:33:36	    Page 7
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/04/23"
??FILENAME			  Text	 "strcpy  "
??TIME				  Text	 "08:33:36"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@NEXT				  Near	 DGROUP:0131
@@NEXT				  Near	 DGROUP:01C8
@@NEXT				  Near	 DGROUP:01F5
@@NEXT2				  Near	 DGROUP:0224
@@RET				  Near	 DGROUP:022D
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 STRCPY
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
BORDER				  Near	 DGROUP:016F
FOUT				  Near	 DGROUP:013E
FRAME				  Byte	 DGROUP:022E
HEIGHT				  Near	 DGROUP:01EB
NOT_SMOL_TXT			  Near	 DGROUP:01FD
NOT_SMOL_TXT1			  Near	 DGROUP:01E2
OUTL				  Byte	 DGROUP:0243
SMOL_TXT			  Near	 DGROUP:0215
SRC				  Byte	 DGROUP:0237
START				  Near	 DGROUP:0100
STRCPY				  Near	 DGROUP:0128
STRING				  Near	 DGROUP:01BE
TEXT				  Near	 DGROUP:01D3
WRITELINE			  Near	 DGROUP:0207
ZALOOP				  Near	 DGROUP:019B

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  024F Word	  Public  CODE
