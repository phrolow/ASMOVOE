Turbo Assembler	 Version 4.1	    03/04/23 08:08:35	    Page 1
memset.asm



      1	0000			     .model tiny
      2	0000			     .code
      3
      4				     org 100h
      5
      6				     locals @@
      7
      8	0100  B4 0A		     Start:  mov ah, 0Ah
      9	0102  BA 0250r			     mov dx, offset outl
     10	0105  CD 21			     int 21h
     11
     12	0107  B4 0A			     mov ah, 0Ah
     13	0109  BA 024Br			     mov dx, offset args
     14	010C  CD 21			     int 21h
     15
     16	010E  BB 024Br			     mov bx, offset args
     17	0111  8B 47 02			     mov ax, [bx + 2]
     18	0114  32 E4			     xor ah, ah
     19	0116  50			     push ax			     ; count
     20
     21	0117  8B 47 04			     mov ax, [bx + 4]
     22	011A  32 E4			     xor ah, ah
     23	011C  50			     push ax			     ; char
     24
     25	011D  B8 0250r			     mov ax, offset outl
     26	0120  05 0002			     add ax, 2
     27	0123  50			     push ax			     ; dest
     28
     29	0124  E8 0009			     call memset
     30
     31	0127  4E			     dec si
     32
     33	0128  E8 001B			     call fout
     34
     35	012B  B8 4C00			     mov ax, 04C00h
     36	012E  CD 21			     int 21h
     37
     38				     include memset.asi
1    39				     ;void *memset(
1    40				     ;	 void *dest,
1    41				     ;	 int c,
1    42				     ;	 size_t	count
1    43				     ;);
1    44
1    45	0130			     memset  proc
1    46	0130  55			     push bp
1    47	0131  8B EC			     mov bp, sp
1    48
1    49	0133  8B 7E 04			     mov di, [bp + 4]
1    50
1    51	0136  8B 46 06			     mov ax, [bp + 6]
1    52
1    53	0139  8B 4E 08			     mov cx, [bp + 8]
1    54
1    55	013C  AA		     @@Next: stosb
1    56
1    57	013D  E2 FD			     loop @@Next
Turbo Assembler	 Version 4.1	    03/04/23 08:08:35	    Page 2
memset.asm



1    58
1    59	013F  8B 76 04			     mov si, [bp + 4]
1    60
1    61	0142  8B E5			     mov sp, bp
1    62	0144  5D			     pop bp
1    63	0145  C3			     ret
1    64	0146				     endp
     65
     66				     include out.asi
1    67				     ; pls si
1    68
1    69	0146			     fout    proc
1    70	0146  55			     push bp
1    71	0147  8B EC			     mov bp, sp
1    72
1    73	0149  56			     push si
1    74
1    75	014A  B4 1E			     mov ah, 1Eh
1    76
1    77	014C  BF B800			     mov di, 0B800h
1    78	014F  8E C7			     mov es, di
1    79
1    80	0151  BF 0334			     mov di, (80 * 5 + 10) * 2
1    81
1    82	0154  B6 0F			     mov dh, 15
1    83	0156  B2 3C			     mov dl, 60
1    84
1    85	0158  BE 0236r			     mov si, offset frame
1    86
1    87	015B  E8 0019			     call Border
1    88
1    89	015E  5E			     pop si
1    90
1    91	015F  8A 1C			     mov bl, byte ptr [si]
1    92	0161  32 FF			     xor bh, bh
1    93
1    94	0163  46			     inc si
1    95
1    96	0164  32 E4			     xor ah, ah
1    97	0166  8A C3			     mov al, bl
1    98
1    99	0168  B2 0A			     mov dl, 10
1   100	016A  F6 F2			     div dl
1   101
1   102	016C  8A D4			     mov dl, ah
1   103	016E  8A F0			     mov dh, al
1   104
1   105	0170  E8 0068			     call Text
1   106
1   107	0173  8B E5			     mov sp, bp
1   108	0175  5D			     pop bp
1   109	0176  C3			     ret
1   110	0177				     endp
1   111
1   112				     include bordre.asi
2   113				     ;
2   114				     ; args - ah, di, dl, si
Turbo Assembler	 Version 4.1	    03/04/23 08:08:35	    Page 3
memset.asm



2   115				     ; ah - attribute
2   116				     ; di - start
2   117				     ; dl - width
2   118				     ; si - border source
2   119				     ; dh - height
2   120				     ; destroys	- dohuya
2   121				     ;
2   122
2   123	0177			     Border  proc
2   124	0177  55			     push bp
2   125	0178  8B EC			     mov bp, sp
2   126
2   127	017A  55			     push bp
2   128
2   129	017B  E8 0048			     call String
2   130
2   131	017E  81 C7 00A0		     add di, 80	* 2
2   132
2   133	0182  32 FF			     xor bh, bh
2   134	0184  8A DA			     mov bl, dl
2   135
2   136	0186  2B FB			     sub di, bx
2   137	0188  2B FB			     sub di, bx
2   138
2   139	018A  8B EA			     mov bp, dx
2   140	018C  81 E5 FF00		     and bp, 0FF00h
2   141	0190  D1 ED D1 ED D1 ED	D1+	     shr bp, 8
    142	      ED D1 ED D1 ED D1	ED+
    143	      D1 ED
2   144	01A0  83 ED 02			     sub bp, 2
2   145
2   146	01A3  E8 0020		     zaloop: call String
2   147
2   148	01A6  83 EE 03			     sub si, 3
2   149
2   150	01A9  81 C7 00A0		     add di, 80	* 2
2   151
2   152	01AD  32 FF			     xor bh, bh
2   153	01AF  8A DA			     mov bl, dl
2   154
2   155	01B1  2B FB			     sub di, bx
2   156	01B3  2B FB			     sub di, bx
2   157
2   158	01B5  4D			     dec bp
2   159
2   160	01B6  83 FD 00			     cmp bp, 0
2   161	01B9  75 E8			     jne zaloop
2   162
2   163	01BB  83 C6 03			     add si, 3
2   164
2   165	01BE  E8 0005			     call String
2   166
2   167	01C1  5D			     pop bp
2   168
2   169	01C2  8B E5			     mov sp, bp
2   170	01C4  5D			     pop bp
2   171	01C5  C3			     ret
Turbo Assembler	 Version 4.1	    03/04/23 08:08:35	    Page 4
memset.asm



2   172	01C6				     endp
2   173
2   174					     include string.asi
3   175				     ;
3   176				     ; args - ah, di, dl
3   177				     ; ah - attribute
3   178				     ; di - start
3   179				     ; dl - length
3   180				     ; destroys	- si, cx
3   181				     ;
3   182
3   183	01C6			     String  proc
3   184
3   185	01C6  AC			     lodsb
3   186	01C7  AB			     stosw
3   187
3   188	01C8  AC			     lodsb
3   189
3   190	01C9  8A CA			     mov cl, dl
3   191	01CB  80 E9 02			     sub cl, 2
3   192	01CE  32 ED			     xor ch, ch
3   193
3   194	01D0  26: 89 05		     @@Next: mov es:[di], ax
3   195
3   196	01D3  83 C7 02			     add di, 2
3   197
3   198	01D6  E2 F8			     loop @@Next
3   199
3   200	01D8  AC			     lodsb
3   201	01D9  AB			     stosw
3   202
3   203	01DA  C3			     ret
3   204	01DB				     endp
1   205				     include text.asi
2   206	01DB			     Text    proc
2   207
2   208	01DB  BF 07D0			     mov di, 80	* 25
2   209
2   210	01DE  8B C2			     mov ax, dx
2   211	01E0  32 E4			     xor ah, ah			     ; dl в общ
2   212
2   213	01E2  80 FE 00			     cmp dh, 0
2   214	01E5  75 03			     jne not_smol_txt1		     ; концептуально - сначала идет +
    215				     распечатка "больших" строк, а потом маленькой; ну и    +
    216				     здесь	джамп сразу к распечатке маленькой; важно не   +
    217				     проебать dl
2   218
2   219	01E7  EB 34 90			     jmp smol_txt
2   220
2   221	01EA			     not_smol_txt1:
2   222
2   223	01EA  32 E4			     xor ah, ah
2   224	01EC  8A C6			     mov al, dh
2   225
2   226	01EE  8B E9			     mov bp, cx
2   227
2   228	01F0  B9 00A0			     mov cx, word ptr 80 * 2
Turbo Assembler	 Version 4.1	    03/04/23 08:08:35	    Page 5
memset.asm



2   229
2   230	01F3			     Height:
2   231
2   232	01F3  2B F8			     sub di, ax
2   233
2   234	01F5  E2 FC			     loop Height
2   235
2   236	01F7  8B CD			     mov cx, bp
2   237
2   238	01F9  8A CE			     mov cl, dh
2   239	01FB  32 ED			     xor ch, ch
2   240
2   241	01FD			     @@Next:
2   242	01FD  80 F9 00			     cmp cl, 0
2   243	0200  75 03			     jne not_smol_txt
2   244
2   245	0202  EB 19 90			     jmp smol_txt
2   246
2   247	0205			     not_smol_txt:
2   248
2   249	0205  83 EF 0A			     sub di, 5 * 2
2   250
2   251	0208  B4 1E			     mov ah, 1Eh
2   252
2   253	020A  8B E9			     mov bp, cx
2   254
2   255	020C  B9 000A			     mov cx, word ptr 10
2   256
2   257	020F			     WriteLine:
2   258
2   259	020F  AC			     lodsb
2   260	0210  AB			     stosw
2   261
2   262	0211  E2 FC			     loop WriteLine
2   263
2   264	0213  8B CD			     mov cx, bp
2   265
2   266	0215  FE C9			     dec cl
2   267	0217  81 C7 0096		     add di, (80 - 5) *	2
2   268
2   269	021B  EB E0			     jmp @@Next
2   270
2   271	021D			     smol_txt:
2   272	021D  8A C2			     mov al, dl
2   273	021F  32 E4			     xor ah, ah
2   274
2   275	0221  2B F8			     sub di, ax
2   276
2   277	0223  8B CA			     mov cx, dx
2   278	0225  32 ED			     xor ch, ch
2   279
2   280	0227  B4 1E			     mov ah, 1Eh
2   281
2   282	0229  83 E7 FE			     and di, 0FFFEh		     ; need even di
2   283
2   284	022C			     @@Next2:
2   285	022C  83 F9 00			     cmp cx, 0
Turbo Assembler	 Version 4.1	    03/04/23 08:08:35	    Page 6
memset.asm



2   286	022F  74 04			     je	@@ret			     ; cause loop incs cx
2   287
2   288	0231  AC			     lodsb
2   289	0232  AB			     stosw
2   290
2   291
2   292	0233  E2 F7			     loop @@Next2
2   293
2   294	0235  C3		     @@ret:  ret
2   295	0236				     endp
1   296
1   297
1   298
    299
    300	0236  44 45 44 45 20 45	44+  frame   db	'D', 'E', 'D', 'E', ' ', 'E', 'D', 'E',	'D'
    301	      45 44
    302	023F  0A 00 0A*(00)	     jopa    db	10, 0, 10 dup(0)
    303	024B  05 00 00 00 00	     args    db	5, 0, 0, 0, 0
    304	0250  0A 00 0A*(00)	     outl    db	10, 0, 10 dup(0)
    305
    306				     end     Start
Turbo Assembler	 Version 4.1	    03/04/23 08:08:35	    Page 7
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/04/23"
??FILENAME			  Text	 "memset  "
??TIME				  Text	 "08:08:34"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@NEXT				  Near	 DGROUP:013C
@@NEXT				  Near	 DGROUP:01D0
@@NEXT				  Near	 DGROUP:01FD
@@NEXT2				  Near	 DGROUP:022C
@@RET				  Near	 DGROUP:0235
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 MEMSET
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ARGS				  Byte	 DGROUP:024B
BORDER				  Near	 DGROUP:0177
FOUT				  Near	 DGROUP:0146
FRAME				  Byte	 DGROUP:0236
HEIGHT				  Near	 DGROUP:01F3
JOPA				  Byte	 DGROUP:023F
MEMSET				  Near	 DGROUP:0130
NOT_SMOL_TXT			  Near	 DGROUP:0205
NOT_SMOL_TXT1			  Near	 DGROUP:01EA
OUTL				  Byte	 DGROUP:0250
SMOL_TXT			  Near	 DGROUP:021D
START				  Near	 DGROUP:0100
STRING				  Near	 DGROUP:01C6
TEXT				  Near	 DGROUP:01DB
WRITELINE			  Near	 DGROUP:020F
ZALOOP				  Near	 DGROUP:01A3

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  025C Word	  Public  CODE
