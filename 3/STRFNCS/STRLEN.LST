Turbo Assembler	 Version 4.1	    03/04/23 08:21:37	    Page 1
strlen.asm



      1	0000			     .model tiny
      2	0000			     .code
      3
      4				     org 100h
      5
      6				     locals @@
      7
      8	0100  B4 0A		     Start:  mov ah, 0Ah
      9	0102  BA 01FAr			     mov dx, offset jopa
     10	0105  CD 21			     int 21h
     11
     12	0107  E8 0068			     call frm
     13
     14	010A  B8 01FAr			     mov ax, offset jopa
     15	010D  05 0002			     add ax, 2
     16	0110  50			     push ax
     17
     18	0111  E8 000D			     call strlen
     19
     20	0114  8B C3			     mov ax, bx
     21	0116  BB 07CC			     mov bx, (40 * 25 -	2) * 2
     22
     23	0119  E8 001A			     call hexout
     24
     25	011C  B8 4C00			     mov ax, 04C00h
     26	011F  CD 21			     int 21h
     27
     28				     include strlen.asi
1    29	0121			     strlen  proc
1    30	0121  55			     push bp
1    31	0122  8B EC			     mov bp, sp
1    32
1    33	0124  8B 46 04			     mov ax, [bp + 4]
1    34
1    35	0127  BB FFFF			     mov bx, 0FFFFh
1    36	012A  8B F0			     mov si, ax
1    37
1    38	012C  AC		     @@Next: lodsb
1    39
1    40	012D  43			     inc bx
1    41
1    42	012E  3C 0D			     cmp al, 0Dh
1    43	0130  75 FA			     jne @@Next
1    44
1    45	0132  8B E5			     mov sp, bp
1    46	0134  5D			     pop bp
1    47	0135  C3			     ret
1    48	0136				     endp
     49				     include hexout.asi
1    50				     ;===============================================;
1    51				     ; Uses: ax, bx								     ;
1    52				     ; Destroys: cx, es, di						     ;
1    53				     ; Returns:										     ;
1    54				     ; Expects:	num in ax, start of label in bx		     ;
1    55				     ;===============================================;
1    56
1    57	0136			     Hexout  proc
Turbo Assembler	 Version 4.1	    03/04/23 08:21:37	    Page 2
strlen.asm



1    58
1    59	0136  BF B800			     mov di, 0B800h
1    60	0139  8E C7			     mov es, di
1    61	013B  8B FB			     mov di, bx		     ; set vm to line begin (dx)
1    62
1    63	013D  B9 0004			     mov cx, word ptr 4	     ; we output 4 chars
1    64
1    65	0140  BB 000F		     @@Next: mov bx, 0Fh	     ; bit mask
1    66
1    67	0143  FE C9			     dec cl
1    68
1    69	0145  D3 E3			     shl bx, cl
1    70	0147  D3 E3			     shl bx, cl
1    71	0149  D3 E3			     shl bx, cl
1    72	014B  D3 E3			     shl bx, cl
1    73
1    74	014D  23 D8			     and bx, ax
1    75
1    76	014F  D3 EB			     shr bx, cl
1    77	0151  D3 EB			     shr bx, cl
1    78	0153  D3 EB			     shr bx, cl
1    79	0155  D3 EB			     shr bx, cl
1    80
1    81	0157  FE C1			     inc cl		     ; getting the letter
1    82
1    83	0159  83 FB 0A			     cmp bx, 0Ah	     ; is char decimal
1    84	015C  72 06			     jb	@@Dec
1    85
1    86	015E  83 C3 37			     add bx, 'A' - 10d	     ; if char not decimal
1    87
1    88	0161  EB 04 90			     jmp @@Out
1    89
1    90	0164  83 C3 30		     @@Dec:  add bx, '0'	     ; if char is decimal
1    91
1    92	0167  B7 4B		     @@Out:  mov bh, 4Bh
1    93
1    94	0169  26: 89 1D			     mov es:[di], bx	     ; output
1    95
1    96	016C  83 C7 02			     add di, 2
1    97
1    98	016F  E2 CF			     loop @@Next
1    99
1   100	0171  C3			     ret
1   101	0172				     endp
    102				     include stdfrm.asi
1   103	0172			     frm     proc
1   104	0172  55			     push bp
1   105	0173  8B EC			     mov bp, sp
1   106
1   107	0175  B4 1E			     mov ah, 1Eh
1   108
1   109	0177  BF B800			     mov di, 0B800h
1   110	017A  8E C7			     mov es, di
1   111
1   112	017C  BF 0334			     mov di, (80 * 5 + 10) * 2
1   113
1   114	017F  B6 0F			     mov dh, 15
Turbo Assembler	 Version 4.1	    03/04/23 08:21:37	    Page 3
strlen.asm



1   115	0181  B2 3C			     mov dl, 60
1   116
1   117	0183  BE 01F1r			     mov si, offset frame
1   118
1   119	0186  E8 0004			     call Border
1   120
1   121	0189  8B E5			     mov sp, bp
1   122	018B  5D			     pop bp
1   123	018C  C3			     ret
1   124	018D				     endp
1   125
1   126				     include bordre.asi
2   127				     ;
2   128				     ; args - ah, di, dl, si
2   129				     ; ah - attribute
2   130				     ; di - start
2   131				     ; dl - width
2   132				     ; si - border source
2   133				     ; dh - height
2   134				     ; destroys	- dohuya
2   135				     ;
2   136
2   137	018D			     Border  proc
2   138	018D  55			     push bp
2   139	018E  8B EC			     mov bp, sp
2   140
2   141	0190  55			     push bp
2   142
2   143	0191  E8 0048			     call String
2   144
2   145	0194  81 C7 00A0		     add di, 80	* 2
2   146
2   147	0198  32 FF			     xor bh, bh
2   148	019A  8A DA			     mov bl, dl
2   149
2   150	019C  2B FB			     sub di, bx
2   151	019E  2B FB			     sub di, bx
2   152
2   153	01A0  8B EA			     mov bp, dx
2   154	01A2  81 E5 FF00		     and bp, 0FF00h
2   155	01A6  D1 ED D1 ED D1 ED	D1+	     shr bp, 8
    156	      ED D1 ED D1 ED D1	ED+
    157	      D1 ED
2   158	01B6  83 ED 02			     sub bp, 2
2   159
2   160	01B9  E8 0020		     zaloop: call String
2   161
2   162	01BC  83 EE 03			     sub si, 3
2   163
2   164	01BF  81 C7 00A0		     add di, 80	* 2
2   165
2   166	01C3  32 FF			     xor bh, bh
2   167	01C5  8A DA			     mov bl, dl
2   168
2   169	01C7  2B FB			     sub di, bx
2   170	01C9  2B FB			     sub di, bx
2   171
Turbo Assembler	 Version 4.1	    03/04/23 08:21:37	    Page 4
strlen.asm



2   172	01CB  4D			     dec bp
2   173
2   174	01CC  83 FD 00			     cmp bp, 0
2   175	01CF  75 E8			     jne zaloop
2   176
2   177	01D1  83 C6 03			     add si, 3
2   178
2   179	01D4  E8 0005			     call String
2   180
2   181	01D7  5D			     pop bp
2   182
2   183	01D8  8B E5			     mov sp, bp
2   184	01DA  5D			     pop bp
2   185	01DB  C3			     ret
2   186	01DC				     endp
2   187
2   188					     include string.asi
3   189				     ;
3   190				     ; args - ah, di, dl
3   191				     ; ah - attribute
3   192				     ; di - start
3   193				     ; dl - length
3   194				     ; destroys	- si, cx
3   195				     ;
3   196
3   197	01DC			     String  proc
3   198
3   199	01DC  AC			     lodsb
3   200	01DD  AB			     stosw
3   201
3   202	01DE  AC			     lodsb
3   203
3   204	01DF  8A CA			     mov cl, dl
3   205	01E1  80 E9 02			     sub cl, 2
3   206	01E4  32 ED			     xor ch, ch
3   207
3   208	01E6  26: 89 05		     @@Next: mov es:[di], ax
3   209
3   210	01E9  83 C7 02			     add di, 2
3   211
3   212	01EC  E2 F8			     loop @@Next
3   213
3   214	01EE  AC			     lodsb
3   215	01EF  AB			     stosw
3   216
3   217	01F0  C3			     ret
3   218	01F1				     endp
    219
    220	01F1  44 45 44 45 20 45	44+  frame   db	'D', 'E', 'D', 'E', ' ', 'E', 'D', 'E',	'D'
    221	      45 44
    222	01FA  0A 00 0A*(00)	     jopa    db	10, 0, 10 dup(0)
    223
    224				     end     Start
Turbo Assembler	 Version 4.1	    03/04/23 08:21:37	    Page 5
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/04/23"
??FILENAME			  Text	 "strlen  "
??TIME				  Text	 "08:21:37"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@DEC				  Near	 DGROUP:0164
@@NEXT				  Near	 DGROUP:012C
@@NEXT				  Near	 DGROUP:0140
@@NEXT				  Near	 DGROUP:01E6
@@OUT				  Near	 DGROUP:0167
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 STRLEN
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
BORDER				  Near	 DGROUP:018D
FRAME				  Byte	 DGROUP:01F1
FRM				  Near	 DGROUP:0172
HEXOUT				  Near	 DGROUP:0136
JOPA				  Byte	 DGROUP:01FA
START				  Near	 DGROUP:0100
STRING				  Near	 DGROUP:01DC
STRLEN				  Near	 DGROUP:0121
ZALOOP				  Near	 DGROUP:01B9

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0206 Word	  Public  CODE
