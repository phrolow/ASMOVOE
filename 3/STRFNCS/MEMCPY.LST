Turbo Assembler	 Version 4.1	    03/04/23 08:29:43	    Page 1
memcpy.asm



      1	0000			     .model tiny
      2	0000			     .code
      3
      4				     org 100h
      5
      6				     locals @@
      7
      8	0100  B4 0A		     Start:  mov ah, 0Ah
      9	0102  BA 0262r			     mov dx, offset args
     10	0105  CD 21			     int 21h
     11
     12	0107  B4 0A			     mov ah, 0Ah
     13	0109  BA 024Ar			     mov dx, offset src
     14	010C  CD 21			     int 21h
     15
     16	010E  B4 0A			     mov ah, 0Ah
     17	0110  BA 0256r			     mov dx, offset outl
     18	0113  CD 21			     int 21h
     19
     20	0115  BB 0262r			     mov bx, offset args
     21	0118  8B 47 02			     mov ax, [bx + 2]
     22	011B  32 E4			     xor ah, ah
     23	011D  50			     push ax				     ; count
     24
     25	011E  B8 024Ar			     mov ax, offset src
     26	0121  05 0002			     add ax, 2
     27	0124  50			     push ax				     ; source
     28
     29	0125  B8 0256r			     mov ax, offset outl
     30	0128  05 0002			     add ax, 2
     31	012B  50			     push ax				     ; dest
     32
     33	012C  E8 000B			     call memcpy
     34
     35	012F  4F			     dec di
     36	0130  8B F7			     mov si, di
     37
     38	0132  E8 001C			     call fout
     39
     40	0135  B8 4C00			     mov ax, 4C00h
     41	0138  CD 21			     int 21h
     42
     43				     include memcpy.asi
1    44				     ; void *memcpy(void *dest,	const void *source, size_t count)
1    45
1    46	013A			     memcpy  proc
1    47	013A  55			     push bp
1    48	013B  8B EC			     mov bp, sp
1    49
1    50	013D  8B 7E 04			     mov di, [bp + 4]
1    51
1    52	0140  8B 76 06			     mov si, [bp + 6]
1    53
1    54	0143  8B 4E 08			     mov cx, [bp + 8]
1    55
1    56	0146  AC		     @@Next: lodsb
1    57	0147  AA			     stosb
Turbo Assembler	 Version 4.1	    03/04/23 08:29:43	    Page 2
memcpy.asm



1    58
1    59	0148  E2 FC			     loop @@Next
1    60
1    61	014A  8B 7E 04			     mov di, [bp + 4]
1    62
1    63	014D  8B E5			     mov sp, bp
1    64	014F  5D			     pop bp
1    65	0150  C3			     ret
1    66	0151				     endp
     67
     68				     include out.asi
1    69				     ; pls si
1    70
1    71	0151			     fout    proc
1    72	0151  55			     push bp
1    73	0152  8B EC			     mov bp, sp
1    74
1    75	0154  56			     push si
1    76
1    77	0155  B4 1E			     mov ah, 1Eh
1    78
1    79	0157  BF B800			     mov di, 0B800h
1    80	015A  8E C7			     mov es, di
1    81
1    82	015C  BF 0334			     mov di, (80 * 5 + 10) * 2
1    83
1    84	015F  B6 0F			     mov dh, 15
1    85	0161  B2 3C			     mov dl, 60
1    86
1    87	0163  BE 0241r			     mov si, offset frame
1    88
1    89	0166  E8 0019			     call Border
1    90
1    91	0169  5E			     pop si
1    92
1    93	016A  8A 1C			     mov bl, byte ptr [si]
1    94	016C  32 FF			     xor bh, bh
1    95
1    96	016E  46			     inc si
1    97
1    98	016F  32 E4			     xor ah, ah
1    99	0171  8A C3			     mov al, bl
1   100
1   101	0173  B2 0A			     mov dl, 10
1   102	0175  F6 F2			     div dl
1   103
1   104	0177  8A D4			     mov dl, ah
1   105	0179  8A F0			     mov dh, al
1   106
1   107	017B  E8 0068			     call Text
1   108
1   109	017E  8B E5			     mov sp, bp
1   110	0180  5D			     pop bp
1   111	0181  C3			     ret
1   112	0182				     endp
1   113
1   114				     include bordre.asi
Turbo Assembler	 Version 4.1	    03/04/23 08:29:43	    Page 3
memcpy.asm



2   115				     ;
2   116				     ; args - ah, di, dl, si
2   117				     ; ah - attribute
2   118				     ; di - start
2   119				     ; dl - width
2   120				     ; si - border source
2   121				     ; dh - height
2   122				     ; destroys	- dohuya
2   123				     ;
2   124
2   125	0182			     Border  proc
2   126	0182  55			     push bp
2   127	0183  8B EC			     mov bp, sp
2   128
2   129	0185  55			     push bp
2   130
2   131	0186  E8 0048			     call String
2   132
2   133	0189  81 C7 00A0		     add di, 80	* 2
2   134
2   135	018D  32 FF			     xor bh, bh
2   136	018F  8A DA			     mov bl, dl
2   137
2   138	0191  2B FB			     sub di, bx
2   139	0193  2B FB			     sub di, bx
2   140
2   141	0195  8B EA			     mov bp, dx
2   142	0197  81 E5 FF00		     and bp, 0FF00h
2   143	019B  D1 ED D1 ED D1 ED	D1+	     shr bp, 8
    144	      ED D1 ED D1 ED D1	ED+
    145	      D1 ED
2   146	01AB  83 ED 02			     sub bp, 2
2   147
2   148	01AE  E8 0020		     zaloop: call String
2   149
2   150	01B1  83 EE 03			     sub si, 3
2   151
2   152	01B4  81 C7 00A0		     add di, 80	* 2
2   153
2   154	01B8  32 FF			     xor bh, bh
2   155	01BA  8A DA			     mov bl, dl
2   156
2   157	01BC  2B FB			     sub di, bx
2   158	01BE  2B FB			     sub di, bx
2   159
2   160	01C0  4D			     dec bp
2   161
2   162	01C1  83 FD 00			     cmp bp, 0
2   163	01C4  75 E8			     jne zaloop
2   164
2   165	01C6  83 C6 03			     add si, 3
2   166
2   167	01C9  E8 0005			     call String
2   168
2   169	01CC  5D			     pop bp
2   170
2   171	01CD  8B E5			     mov sp, bp
Turbo Assembler	 Version 4.1	    03/04/23 08:29:43	    Page 4
memcpy.asm



2   172	01CF  5D			     pop bp
2   173	01D0  C3			     ret
2   174	01D1				     endp
2   175
2   176					     include string.asi
3   177				     ;
3   178				     ; args - ah, di, dl
3   179				     ; ah - attribute
3   180				     ; di - start
3   181				     ; dl - length
3   182				     ; destroys	- si, cx
3   183				     ;
3   184
3   185	01D1			     String  proc
3   186
3   187	01D1  AC			     lodsb
3   188	01D2  AB			     stosw
3   189
3   190	01D3  AC			     lodsb
3   191
3   192	01D4  8A CA			     mov cl, dl
3   193	01D6  80 E9 02			     sub cl, 2
3   194	01D9  32 ED			     xor ch, ch
3   195
3   196	01DB  26: 89 05		     @@Next: mov es:[di], ax
3   197
3   198	01DE  83 C7 02			     add di, 2
3   199
3   200	01E1  E2 F8			     loop @@Next
3   201
3   202	01E3  AC			     lodsb
3   203	01E4  AB			     stosw
3   204
3   205	01E5  C3			     ret
3   206	01E6				     endp
1   207				     include text.asi
2   208	01E6			     Text    proc
2   209
2   210	01E6  BF 07D0			     mov di, 80	* 25
2   211
2   212	01E9  8B C2			     mov ax, dx
2   213	01EB  32 E4			     xor ah, ah			     ; dl в общ
2   214
2   215	01ED  80 FE 00			     cmp dh, 0
2   216	01F0  75 03			     jne not_smol_txt1		     ; концептуально - сначала идет +
    217				     распечатка "больших" строк, а потом маленькой; ну и    +
    218				     здесь	джамп сразу к распечатке маленькой; важно не   +
    219				     проебать dl
2   220
2   221	01F2  EB 34 90			     jmp smol_txt
2   222
2   223	01F5			     not_smol_txt1:
2   224
2   225	01F5  32 E4			     xor ah, ah
2   226	01F7  8A C6			     mov al, dh
2   227
2   228	01F9  8B E9			     mov bp, cx
Turbo Assembler	 Version 4.1	    03/04/23 08:29:43	    Page 5
memcpy.asm



2   229
2   230	01FB  B9 00A0			     mov cx, word ptr 80 * 2
2   231
2   232	01FE			     Height:
2   233
2   234	01FE  2B F8			     sub di, ax
2   235
2   236	0200  E2 FC			     loop Height
2   237
2   238	0202  8B CD			     mov cx, bp
2   239
2   240	0204  8A CE			     mov cl, dh
2   241	0206  32 ED			     xor ch, ch
2   242
2   243	0208			     @@Next:
2   244	0208  80 F9 00			     cmp cl, 0
2   245	020B  75 03			     jne not_smol_txt
2   246
2   247	020D  EB 19 90			     jmp smol_txt
2   248
2   249	0210			     not_smol_txt:
2   250
2   251	0210  83 EF 0A			     sub di, 5 * 2
2   252
2   253	0213  B4 1E			     mov ah, 1Eh
2   254
2   255	0215  8B E9			     mov bp, cx
2   256
2   257	0217  B9 000A			     mov cx, word ptr 10
2   258
2   259	021A			     WriteLine:
2   260
2   261	021A  AC			     lodsb
2   262	021B  AB			     stosw
2   263
2   264	021C  E2 FC			     loop WriteLine
2   265
2   266	021E  8B CD			     mov cx, bp
2   267
2   268	0220  FE C9			     dec cl
2   269	0222  81 C7 0096		     add di, (80 - 5) *	2
2   270
2   271	0226  EB E0			     jmp @@Next
2   272
2   273	0228			     smol_txt:
2   274	0228  8A C2			     mov al, dl
2   275	022A  32 E4			     xor ah, ah
2   276
2   277	022C  2B F8			     sub di, ax
2   278
2   279	022E  8B CA			     mov cx, dx
2   280	0230  32 ED			     xor ch, ch
2   281
2   282	0232  B4 1E			     mov ah, 1Eh
2   283
2   284	0234  83 E7 FE			     and di, 0FFFEh		     ; need even di
2   285
Turbo Assembler	 Version 4.1	    03/04/23 08:29:43	    Page 6
memcpy.asm



2   286	0237			     @@Next2:
2   287	0237  83 F9 00			     cmp cx, 0
2   288	023A  74 04			     je	@@ret			     ; cause loop incs cx
2   289
2   290	023C  AC			     lodsb
2   291	023D  AB			     stosw
2   292
2   293
2   294	023E  E2 F7			     loop @@Next2
2   295
2   296	0240  C3		     @@ret:  ret
2   297	0241				     endp
1   298
1   299
1   300
    301
    302	0241  44 45 44 45 20 45	44+  frame   db	'D', 'E', 'D', 'E', ' ', 'E', 'D', 'E',	'D'
    303	      45 44
    304	024A  0A 00 0A*(00)	     src     db	10, 0, 10 dup(0)
    305	0256  0A 00 0A*(00)	     outl    db	10, 0, 10 dup(0)
    306	0262  03 00 00 00 00	     args    db	3, 0, 0, 0, 0
    307
    308				     end     Start
Turbo Assembler	 Version 4.1	    03/04/23 08:29:43	    Page 7
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/04/23"
??FILENAME			  Text	 "memcpy  "
??TIME				  Text	 "08:29:43"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@NEXT				  Near	 DGROUP:0146
@@NEXT				  Near	 DGROUP:01DB
@@NEXT				  Near	 DGROUP:0208
@@NEXT2				  Near	 DGROUP:0237
@@RET				  Near	 DGROUP:0240
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 MEMCPY
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ARGS				  Byte	 DGROUP:0262
BORDER				  Near	 DGROUP:0182
FOUT				  Near	 DGROUP:0151
FRAME				  Byte	 DGROUP:0241
HEIGHT				  Near	 DGROUP:01FE
MEMCPY				  Near	 DGROUP:013A
NOT_SMOL_TXT			  Near	 DGROUP:0210
NOT_SMOL_TXT1			  Near	 DGROUP:01F5
OUTL				  Byte	 DGROUP:0256
SMOL_TXT			  Near	 DGROUP:0228
SRC				  Byte	 DGROUP:024A
START				  Near	 DGROUP:0100
STRING				  Near	 DGROUP:01D1
TEXT				  Near	 DGROUP:01E6
WRITELINE			  Near	 DGROUP:021A
ZALOOP				  Near	 DGROUP:01AE

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0267 Word	  Public  CODE
