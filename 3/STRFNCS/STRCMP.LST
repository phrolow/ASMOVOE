Turbo Assembler	 Version 4.1	    02/28/23 19:04:39	    Page 1
strcmp.asm



      1	0000			     .model tiny
      2	0000			     .code
      3
      4				     org 100h
      5
      6				     locals @@
      7
      8	0100  E8 0074		     Start:  call frm
      9
     10	0103  B8 0203r			     mov ax, offset str2		 ; str2
     11	0106  50			     push ax
     12
     13	0107  B8 01FFr			     mov ax, offset str1		 ; ptr to str1
     14	010A  50			     push ax
     15
     16	010B  E8 0049			     call strcmp
     17
     18	010E  32 E4			     xor ah, ah
     19	0110  BB 07CC			     mov bx, (40 * 25 -	2) * 2
     20
     21	0113  E8 0005			     call hexout
     22
     23	0116  B8 4C00			     mov ax, 04C00h
     24	0119  CD 21			     int 21h
     25
     26				     include hexout.asi
1    27				     ;===============================================;
1    28				     ; Uses: ax, bx								     ;
1    29				     ; Destroys: cx, es, di						     ;
1    30				     ; Returns:										     ;
1    31				     ; Expects:	num in ax, start of label in bx		     ;
1    32				     ;===============================================;
1    33
1    34	011B			     Hexout  proc
1    35
1    36	011B  BF B800			     mov di, 0B800h
1    37	011E  8E C7			     mov es, di
1    38	0120  8B FB			     mov di, bx		     ; set vm to line begin (dx)
1    39
1    40	0122  B9 0004			     mov cx, word ptr 4	     ; we output 4 chars
1    41
1    42	0125  BB 000F		     @@Next: mov bx, 0Fh	     ; bit mask
1    43
1    44	0128  FE C9			     dec cl
1    45
1    46	012A  D3 E3			     shl bx, cl
1    47	012C  D3 E3			     shl bx, cl
1    48	012E  D3 E3			     shl bx, cl
1    49	0130  D3 E3			     shl bx, cl
1    50
1    51	0132  23 D8			     and bx, ax
1    52
1    53	0134  D3 EB			     shr bx, cl
1    54	0136  D3 EB			     shr bx, cl
1    55	0138  D3 EB			     shr bx, cl
1    56	013A  D3 EB			     shr bx, cl
1    57
Turbo Assembler	 Version 4.1	    02/28/23 19:04:39	    Page 2
strcmp.asm



1    58	013C  FE C1			     inc cl		     ; getting the letter
1    59
1    60	013E  83 FB 0A			     cmp bx, 0Ah	     ; is char decimal
1    61	0141  72 06			     jb	@@Dec
1    62
1    63	0143  83 C3 37			     add bx, 'A' - 10d	     ; if char not decimal
1    64
1    65	0146  EB 04 90			     jmp @@Out
1    66
1    67	0149  83 C3 30		     @@Dec:  add bx, '0'	     ; if char is decimal
1    68
1    69	014C  B7 4B		     @@Out:  mov bh, 4Bh
1    70
1    71	014E  26: 89 1D			     mov es:[di], bx	     ; output
1    72
1    73	0151  83 C7 02			     add di, 2
1    74
1    75	0154  E2 CF			     loop @@Next
1    76
1    77	0156  C3			     ret
1    78	0157				     endp
     79				     include strcmp.asi
1    80				     ;int strcmp(
1    81				     ;	 const char *buffer1,
1    82				     ;	 const char *buffer2
1    83				     ;);
1    84
1    85	0157			     strcmp  proc
1    86	0157  55			     push bp
1    87	0158  8B EC			     mov bp, sp
1    88
1    89	015A  8B 76 04			     mov si, [bp + 4]
1    90
1    91	015D  8B 5E 06			     mov bx, [bp + 6]
1    92
1    93	0160  AC		     @@Next: lodsb
1    94
1    95	0161  8A 17			     mov dl, [bx]
1    96	0163  43			     inc bx
1    97
1    98	0164  3A C2			     cmp al, dl
1    99	0166  75 0B			     jne exit
1   100
1   101	0168  3C 24			     cmp al, '$'
1   102	016A  74 07			     je	exit
1   103
1   104	016C  80 FA 24			     cmp dl, '$'
1   105	016F  74 02			     je	exit
1   106
1   107	0171  EB ED			     jmp @@Next
1   108
1   109	0173  2A C2		     exit:   sub al, dl
1   110
1   111	0175  5D			     pop bp
1   112	0176  C3			     ret
1   113	0177				     endp
    114				     include stdfrm.asi
Turbo Assembler	 Version 4.1	    02/28/23 19:04:39	    Page 3
strcmp.asm



1   115	0177			     frm     proc
1   116	0177  55			     push bp
1   117	0178  8B EC			     mov bp, sp
1   118
1   119	017A  B4 1E			     mov ah, 1Eh
1   120
1   121	017C  BF B800			     mov di, 0B800h
1   122	017F  8E C7			     mov es, di
1   123
1   124	0181  BF 0334			     mov di, (80 * 5 + 10) * 2
1   125
1   126	0184  B6 0F			     mov dh, 15
1   127	0186  B2 3C			     mov dl, 60
1   128
1   129	0188  BE 01F6r			     mov si, offset frame
1   130
1   131	018B  E8 0004			     call Border
1   132
1   133	018E  8B E5			     mov sp, bp
1   134	0190  5D			     pop bp
1   135	0191  C3			     ret
1   136	0192				     endp
1   137
1   138				     include bordre.asi
2   139				     ;
2   140				     ; args - ah, di, dl, si
2   141				     ; ah - attribute
2   142				     ; di - start
2   143				     ; dl - width
2   144				     ; si - border source
2   145				     ; dh - height
2   146				     ; destroys	- dohuya
2   147				     ;
2   148
2   149	0192			     Border  proc
2   150	0192  55			     push bp
2   151	0193  8B EC			     mov bp, sp
2   152
2   153	0195  55			     push bp
2   154
2   155	0196  E8 0048			     call String
2   156
2   157	0199  81 C7 00A0		     add di, 80	* 2
2   158
2   159	019D  32 FF			     xor bh, bh
2   160	019F  8A DA			     mov bl, dl
2   161
2   162	01A1  2B FB			     sub di, bx
2   163	01A3  2B FB			     sub di, bx
2   164
2   165	01A5  8B EA			     mov bp, dx
2   166	01A7  81 E5 FF00		     and bp, 0FF00h
2   167	01AB  D1 ED D1 ED D1 ED	D1+	     shr bp, 8
    168	      ED D1 ED D1 ED D1	ED+
    169	      D1 ED
2   170	01BB  83 ED 02			     sub bp, 2
2   171
Turbo Assembler	 Version 4.1	    02/28/23 19:04:39	    Page 4
strcmp.asm



2   172	01BE  E8 0020		     zaloop: call String
2   173
2   174	01C1  83 EE 03			     sub si, 3
2   175
2   176	01C4  81 C7 00A0		     add di, 80	* 2
2   177
2   178	01C8  32 FF			     xor bh, bh
2   179	01CA  8A DA			     mov bl, dl
2   180
2   181	01CC  2B FB			     sub di, bx
2   182	01CE  2B FB			     sub di, bx
2   183
2   184	01D0  4D			     dec bp
2   185
2   186	01D1  83 FD 00			     cmp bp, 0
2   187	01D4  75 E8			     jne zaloop
2   188
2   189	01D6  83 C6 03			     add si, 3
2   190
2   191	01D9  E8 0005			     call String
2   192
2   193	01DC  5D			     pop bp
2   194
2   195	01DD  8B E5			     mov sp, bp
2   196	01DF  5D			     pop bp
2   197	01E0  C3			     ret
2   198	01E1				     endp
2   199
2   200					     include string.asi
3   201				     ;
3   202				     ; args - ah, di, dl
3   203				     ; ah - attribute
3   204				     ; di - start
3   205				     ; dl - length
3   206				     ; destroys	- si, cx
3   207				     ;
3   208
3   209	01E1			     String  proc
3   210
3   211	01E1  AC			     lodsb
3   212	01E2  AB			     stosw
3   213
3   214	01E3  AC			     lodsb
3   215
3   216	01E4  8A CA			     mov cl, dl
3   217	01E6  80 E9 02			     sub cl, 2
3   218	01E9  32 ED			     xor ch, ch
3   219
3   220	01EB  26: 89 05		     @@Next: mov es:[di], ax
3   221
3   222	01EE  83 C7 02			     add di, 2
3   223
3   224	01F1  E2 F8			     loop @@Next
3   225
3   226	01F3  AC			     lodsb
3   227	01F4  AB			     stosw
3   228
Turbo Assembler	 Version 4.1	    02/28/23 19:04:39	    Page 5
strcmp.asm



3   229	01F5  C3			     ret
3   230	01F6				     endp
    231
    232	01F6  44 45 44 45 20 45	44+  frame   db	'D', 'E', 'D', 'E', ' ', 'E', 'D', 'E',	'D'
    233	      45 44
    234	01FF  01 02 03 24	     str1    db	1, 2, 3, '$'
    235	0203  01 02 03 24	     str2    db	1, 2, 3, '$'
    236
    237				     end     Start
Turbo Assembler	 Version 4.1	    02/28/23 19:04:39	    Page 6
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/28/23"
??FILENAME			  Text	 "strcmp  "
??TIME				  Text	 "19:04:39"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@DEC				  Near	 DGROUP:0149
@@NEXT				  Near	 DGROUP:0125
@@NEXT				  Near	 DGROUP:0160
@@NEXT				  Near	 DGROUP:01EB
@@OUT				  Near	 DGROUP:014C
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 STRCMP
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
BORDER				  Near	 DGROUP:0192
EXIT				  Near	 DGROUP:0173
FRAME				  Byte	 DGROUP:01F6
FRM				  Near	 DGROUP:0177
HEXOUT				  Near	 DGROUP:011B
START				  Near	 DGROUP:0100
STR1				  Byte	 DGROUP:01FF
STR2				  Byte	 DGROUP:0203
STRCMP				  Near	 DGROUP:0157
STRING				  Near	 DGROUP:01E1
ZALOOP				  Near	 DGROUP:01BE

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0207 Word	  Public  CODE
