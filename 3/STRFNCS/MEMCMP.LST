Turbo Assembler	 Version 4.1	    03/04/23 07:54:22	    Page 1
memcmp.asm



      1	0000			     .model tiny
      2	0000			     .code
      3
      4				     org 100h
      5
      6				     locals @@
      7
      8	0100  B4 0A		     Start:  mov ah, 0Ah
      9	0102  BA 0231r			     mov dx, offset args
     10	0105  CD 21			     int 21h
     11
     12	0107  B4 0A			     mov ah, 0Ah
     13	0109  BA 0219r			     mov dx, offset str1
     14	010C  CD 21			     int 21h
     15
     16	010E  B4 0A			     mov ah, 0Ah
     17	0110  BA 0225r			     mov dx, offset str2
     18	0113  CD 21			     int 21h
     19
     20	0115  E8 0079			     call frm
     21
     22	0118  BB 0231r			     mov bx, offset args
     23	011B  8B 47 02			     mov ax, [bx + 2]
     24	011E  32 E4			     xor ah, ah
     25	0120  50			     push ax				  ; length
     26
     27	0121  B8 0225r			     mov ax, offset str2		 ; str2
     28	0124  05 0002			     add ax, 2
     29	0127  50			     push ax
     30
     31	0128  B8 0219r			     mov ax, offset str1		 ; ptr to str1
     32	012B  05 0002			     add ax, 2
     33	012E  50			     push ax
     34
     35	012F  E8 0049			     call memcmp
     36
     37	0132  32 E4			     xor ah, ah
     38	0134  BB 07CC			     mov bx, (40 * 25 -	2) * 2
     39
     40	0137  E8 0005			     call hexout
     41
     42	013A  B8 4C00			     mov ax, 04C00h
     43	013D  CD 21			     int 21h
     44
     45				     include hexout.asi
1    46				     ;===============================================;
1    47				     ; Uses: ax, bx								     ;
1    48				     ; Destroys: cx, es, di						     ;
1    49				     ; Returns:										     ;
1    50				     ; Expects:	num in ax, start of label in bx		     ;
1    51				     ;===============================================;
1    52
1    53	013F			     Hexout  proc
1    54
1    55	013F  BF B800			     mov di, 0B800h
1    56	0142  8E C7			     mov es, di
1    57	0144  8B FB			     mov di, bx		     ; set vm to line begin (dx)
Turbo Assembler	 Version 4.1	    03/04/23 07:54:22	    Page 2
memcmp.asm



1    58
1    59	0146  B9 0004			     mov cx, word ptr 4	     ; we output 4 chars
1    60
1    61	0149  BB 000F		     @@Next: mov bx, 0Fh	     ; bit mask
1    62
1    63	014C  FE C9			     dec cl
1    64
1    65	014E  D3 E3			     shl bx, cl
1    66	0150  D3 E3			     shl bx, cl
1    67	0152  D3 E3			     shl bx, cl
1    68	0154  D3 E3			     shl bx, cl
1    69
1    70	0156  23 D8			     and bx, ax
1    71
1    72	0158  D3 EB			     shr bx, cl
1    73	015A  D3 EB			     shr bx, cl
1    74	015C  D3 EB			     shr bx, cl
1    75	015E  D3 EB			     shr bx, cl
1    76
1    77	0160  FE C1			     inc cl		     ; getting the letter
1    78
1    79	0162  83 FB 0A			     cmp bx, 0Ah	     ; is char decimal
1    80	0165  72 06			     jb	@@Dec
1    81
1    82	0167  83 C3 37			     add bx, 'A' - 10d	     ; if char not decimal
1    83
1    84	016A  EB 04 90			     jmp @@Out
1    85
1    86	016D  83 C3 30		     @@Dec:  add bx, '0'	     ; if char is decimal
1    87
1    88	0170  B7 4B		     @@Out:  mov bh, 4Bh
1    89
1    90	0172  26: 89 1D			     mov es:[di], bx	     ; output
1    91
1    92	0175  83 C7 02			     add di, 2
1    93
1    94	0178  E2 CF			     loop @@Next
1    95
1    96	017A  C3			     ret
1    97	017B				     endp
     98				     include memcmp.asi
1    99				     ;int memcmp(
1   100				     ;	 const void *buffer1,
1   101				     ;	 const void *buffer2,
1   102				     ;	 size_t	count
1   103				     ;);
1   104
1   105	017B			     memcmp  proc
1   106	017B  55			     push bp
1   107	017C  8B EC			     mov bp, sp
1   108
1   109	017E  8B 76 04			     mov si, [bp + 4]
1   110
1   111	0181  8B 5E 06			     mov bx, [bp + 6]
1   112
1   113	0184  8B 4E 08			     mov cx, [bp + 8]
1   114
Turbo Assembler	 Version 4.1	    03/04/23 07:54:22	    Page 3
memcmp.asm



1   115	0187  AC		     @@Next: lodsb
1   116	0188  2A 07			     sub al, [bx]
1   117
1   118	018A  43			     inc bx
1   119
1   120	018B  3C 00			     cmp al, 0
1   121	018D  E1 F8			     loope @@Next
1   122
1   123	018F  5D			     pop bp
1   124	0190  C3			     ret
1   125	0191				     endp
    126				     include stdfrm.asi
1   127	0191			     frm     proc
1   128	0191  55			     push bp
1   129	0192  8B EC			     mov bp, sp
1   130
1   131	0194  B4 1E			     mov ah, 1Eh
1   132
1   133	0196  BF B800			     mov di, 0B800h
1   134	0199  8E C7			     mov es, di
1   135
1   136	019B  BF 0334			     mov di, (80 * 5 + 10) * 2
1   137
1   138	019E  B6 0F			     mov dh, 15
1   139	01A0  B2 3C			     mov dl, 60
1   140
1   141	01A2  BE 0210r			     mov si, offset frame
1   142
1   143	01A5  E8 0004			     call Border
1   144
1   145	01A8  8B E5			     mov sp, bp
1   146	01AA  5D			     pop bp
1   147	01AB  C3			     ret
1   148	01AC				     endp
1   149
1   150				     include bordre.asi
2   151				     ;
2   152				     ; args - ah, di, dl, si
2   153				     ; ah - attribute
2   154				     ; di - start
2   155				     ; dl - width
2   156				     ; si - border source
2   157				     ; dh - height
2   158				     ; destroys	- dohuya
2   159				     ;
2   160
2   161	01AC			     Border  proc
2   162	01AC  55			     push bp
2   163	01AD  8B EC			     mov bp, sp
2   164
2   165	01AF  55			     push bp
2   166
2   167	01B0  E8 0048			     call String
2   168
2   169	01B3  81 C7 00A0		     add di, 80	* 2
2   170
2   171	01B7  32 FF			     xor bh, bh
Turbo Assembler	 Version 4.1	    03/04/23 07:54:22	    Page 4
memcmp.asm



2   172	01B9  8A DA			     mov bl, dl
2   173
2   174	01BB  2B FB			     sub di, bx
2   175	01BD  2B FB			     sub di, bx
2   176
2   177	01BF  8B EA			     mov bp, dx
2   178	01C1  81 E5 FF00		     and bp, 0FF00h
2   179	01C5  D1 ED D1 ED D1 ED	D1+	     shr bp, 8
    180	      ED D1 ED D1 ED D1	ED+
    181	      D1 ED
2   182	01D5  83 ED 02			     sub bp, 2
2   183
2   184	01D8  E8 0020		     zaloop: call String
2   185
2   186	01DB  83 EE 03			     sub si, 3
2   187
2   188	01DE  81 C7 00A0		     add di, 80	* 2
2   189
2   190	01E2  32 FF			     xor bh, bh
2   191	01E4  8A DA			     mov bl, dl
2   192
2   193	01E6  2B FB			     sub di, bx
2   194	01E8  2B FB			     sub di, bx
2   195
2   196	01EA  4D			     dec bp
2   197
2   198	01EB  83 FD 00			     cmp bp, 0
2   199	01EE  75 E8			     jne zaloop
2   200
2   201	01F0  83 C6 03			     add si, 3
2   202
2   203	01F3  E8 0005			     call String
2   204
2   205	01F6  5D			     pop bp
2   206
2   207	01F7  8B E5			     mov sp, bp
2   208	01F9  5D			     pop bp
2   209	01FA  C3			     ret
2   210	01FB				     endp
2   211
2   212					     include string.asi
3   213				     ;
3   214				     ; args - ah, di, dl
3   215				     ; ah - attribute
3   216				     ; di - start
3   217				     ; dl - length
3   218				     ; destroys	- si, cx
3   219				     ;
3   220
3   221	01FB			     String  proc
3   222
3   223	01FB  AC			     lodsb
3   224	01FC  AB			     stosw
3   225
3   226	01FD  AC			     lodsb
3   227
3   228	01FE  8A CA			     mov cl, dl
Turbo Assembler	 Version 4.1	    03/04/23 07:54:22	    Page 5
memcmp.asm



3   229	0200  80 E9 02			     sub cl, 2
3   230	0203  32 ED			     xor ch, ch
3   231
3   232	0205  26: 89 05		     @@Next: mov es:[di], ax
3   233
3   234	0208  83 C7 02			     add di, 2
3   235
3   236	020B  E2 F8			     loop @@Next
3   237
3   238	020D  AC			     lodsb
3   239	020E  AB			     stosw
3   240
3   241	020F  C3			     ret
3   242	0210				     endp
    243
    244	0210  44 45 44 45 20 45	44+  frame   db	'D', 'E', 'D', 'E', ' ', 'E', 'D', 'E',	'D'
    245	      45 44
    246	0219  0A 00 0A*(00)	     str1    db	10, 0, 10 dup(0)
    247	0225  0A 00 0A*(00)	     str2    db	10, 0, 10 dup(0)
    248	0231  03 00 00 00 00 00	     args    db	3, 0, 0, 0, 0, 0
    249
    250				     end     Start
Turbo Assembler	 Version 4.1	    03/04/23 07:54:22	    Page 6
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/04/23"
??FILENAME			  Text	 "memcmp  "
??TIME				  Text	 "07:54:22"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@DEC				  Near	 DGROUP:016D
@@NEXT				  Near	 DGROUP:0149
@@NEXT				  Near	 DGROUP:0187
@@NEXT				  Near	 DGROUP:0205
@@OUT				  Near	 DGROUP:0170
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 MEMCMP
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ARGS				  Byte	 DGROUP:0231
BORDER				  Near	 DGROUP:01AC
FRAME				  Byte	 DGROUP:0210
FRM				  Near	 DGROUP:0191
HEXOUT				  Near	 DGROUP:013F
MEMCMP				  Near	 DGROUP:017B
START				  Near	 DGROUP:0100
STR1				  Byte	 DGROUP:0219
STR2				  Byte	 DGROUP:0225
STRING				  Near	 DGROUP:01FB
ZALOOP				  Near	 DGROUP:01D8

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0237 Word	  Public  CODE
